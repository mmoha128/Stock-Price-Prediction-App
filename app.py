# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xcUN2X_65vIaHOpqx2IdHVFSRcCse063

#Deploy the ARIMA Model in Streamlit for Real-Time Predictions
"""

import streamlit as st
import yfinance as yf
import pandas as pd
from pmdarima import auto_arima
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error
import numpy as np

# User input for stock ticker and dates
ticker = st.text_input("Enter stock ticker", "AAPL")
start_date = st.date_input("Start Date", pd.to_datetime('2015-01-01'))
end_date = st.date_input("End Date", pd.to_datetime('2023-01-01'))

# Progress bar during data fetch and model training
with st.spinner('Fetching data and training the model...'):
    try:
        stock_data = yf.download(ticker, start=start_date, end=end_date)
        if stock_data.empty:
            st.error("Invalid ticker. Please try again.")
    except requests.exceptions.RequestException as e:
        st.error(f"Network error: {e}")

# Show stock data in the app
st.write(stock_data.head())

# Interactive widgets for ARIMA parameters
p = st.slider('Select AR parameter (p)', 0, 10, 1)
d = st.slider('Select Differencing parameter (d)', 0, 2, 1)
q = st.slider('Select MA parameter (q)', 0, 10, 1)

# Train ARIMA model
train_data = stock_data['Close']
model = auto_arima(train_data, seasonal=False, stepwise=True, trace=True, p=p, d=d, q=q)

# Forecasting and displaying results
forecast = model.predict(n_periods=30)
forecast_index = pd.date_range(start=train_data.index[-1], periods=31, freq='B')[1:]
forecast_df = pd.DataFrame(forecast, index=forecast_index, columns=["Forecast"])

# Plot actual and forecasted data
plt.figure(figsize=(10, 6))

# Plot the actual stock data (training data)
plt.plot(train_data, label="Actual", color="blue")

# Plot the forecasted data
plt.plot(forecast_df.index, forecast_df['Forecast'], label="Forecast", color="red")

# Add titles and labels
plt.title(f"{ticker} Stock Price Forecast")
plt.xlabel("Date")
plt.ylabel("Price (USD)")
plt.legend()

# Display the plot in Streamlit
st.pyplot(plt)

# Calculate and display RMSE
y_true = train_data[-30:]
rmse = np.sqrt(mean_squared_error(y_true, forecast[:30]))
st.write(f"RMSE: {rmse:.2f}")